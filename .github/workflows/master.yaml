name: üöÄ Deploy App...

# Controls when the workflow will run
on: # master = production
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: ["master"] # master, development, staging
  pull_request:
    branches: ["master"] # master, development, staging

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  SNAPSHOT_VERSION: ${{ format('{0}-SNAPSHOT', github.event.number) }}
  GITHUB_ISSUE_NUMBER: ${{ github.event.number }}
  TEMPLATE_INFO: "*‚û• REPORTER (${{ github.run_number }})*\n\n#GIT INFO...\nREPO: *${{ github.event.repository.name }}*\nBRANCH: *${{ github.ref_name }}*\n\n#USER...\nOWNER: *${{ github.repository_owner }}*\nPUSHER: *${{ github.event.pusher.name }}*\n\n#SERVER...\nRUNNER: *${{ runner.name }} (${{ runner.os }} ${{ runner.arch }})*\n"

jobs:
  app-deploy:
    name: üöö WhatsApp Notification API - Microservice
    runs-on: server-dell-jefri
    steps:
      - name: Set Time Zone
        run: |
          TZ=Asia/Jakarta

      - name: Get start datetime
        run: |
          echo "start_date=$(date +"%Y-%m-%d %T")" >> ${GITHUB_ENV}
      - name: Send start report
        run: |
          curl --insecure --location '${{ secrets.REPORT_TARGET_URL }}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer ${{ secrets.REPORT_BEARER_TOKEN }}' \
            --data-raw "{
              \"phone_number\": \"${{ secrets.REPORT_PHONE_NUMBER }}\",
              \"message\": \"${{ env.TEMPLATE_INFO }}STATUS: *STARING* üõ´üì°\nTIME: *${{ env.start_date }}*\"
            }"

      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------

      - name: üéâ Get latest code
        uses: actions/checkout@v2

      - name: Rename ENV...
        run: |
          mv .env.example .env

      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------

      - name: F&R - DASHBOARD_ROOT
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: "DASHBOARD_ROOT="
          replace: "DASHBOARD_ROOT=${{ secrets.ENV_DASHBOARD_ROOT }}"
          regex: false
          include: ".env"

      # ----------------------------------------------------------------------

      - name: F&R - JWT_SECRET_TOKEN
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: "JWT_SECRET_TOKEN="
          replace: "JWT_SECRET_TOKEN=${{ secrets.ENV_JWT_SECRET_TOKEN }}"
          regex: false
          include: ".env"

      # ----------------------------------------------------------------------

      - name: F&R - ENV_DB_HOST
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: 'DB_HOST='
          replace: 'DB_HOST=${{ secrets.ENV_DB_HOST }}'
          regex: false
          include: '.env'

      - name: F&R - ENV_DB_USER
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: 'DB_USER='
          replace: 'DB_USER=${{ secrets.ENV_DB_USER }}'
          regex: false
          include: '.env'

      - name: F&R - ENV_DB_PASS
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: 'DB_PASS='
          replace: 'DB_PASS=${{ secrets.ENV_DB_PASS }}'
          regex: false
          include: '.env'

      - name: F&R - ENV_DB_NAME
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: 'DB_NAME='
          replace: 'DB_NAME=${{ secrets.ENV_DB_NAME }}'
          regex: false
          include: '.env'

      # ----------------------------------------------------------------------

      - name: F&R - RABBIT_HOST
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: "RABBIT_HOST="
          replace: "RABBIT_HOST=${{ secrets.ENV_RABBIT_HOST }}"
          regex: false
          include: ".env"

      # ----------------------------------------------------------------------

      # - name: F&R - REDIS_USER
      #   uses: jacobtomlinson/gha-find-replace@v2
      #   with:
      #       find: "REDIS_USER="
      #       replace: "REDIS_USER=${{ secrets.ENV_REDIS_USER }}"
      #       regex: false
      #       include: ".env"

      # - name: F&R - REDIS_PASS
      #   uses: jacobtomlinson/gha-find-replace@v2
      #   with:
      #       find: "REDIS_PASS="
      #       replace: "REDIS_PASS=${{ secrets.ENV_REDIS_PASS }}"
      #       regex: false
      #       include: ".env"

      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------

      # - name: Test Error
      #   run: |
      #     anu

      - name: üì° Docker Compose...
        run: |
          docker-compose pull
          docker-compose up --force-recreate --build -d
          docker image prune -f

      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------

      - name: Get end datetime
        if: success() || failure()
        run: |
          echo "end_date=$(date +"%Y-%m-%d %T")" >> ${GITHUB_ENV}

      # If there is a success, send a report
      - name: Send success report
        if: success()
        run: |
          curl --insecure --location '${{ secrets.REPORT_TARGET_URL }}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer ${{ secrets.REPORT_BEARER_TOKEN }}' \
            --data-raw "{
              \"phone_number\": \"${{ secrets.REPORT_PHONE_NUMBER }}\",
              \"message\": \"${{ env.TEMPLATE_INFO }}STATUS: *DEPLOYED* ‚úàÔ∏è‚úÖ\nTIME: *${{ env.end_date }}*\"
            }"
      # If there is a failure, send a report
      - name: Send failure report
        if: failure()
        run: |
          curl --insecure --location '${{ secrets.REPORT_TARGET_URL }}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer ${{ secrets.REPORT_BEARER_TOKEN }}' \
            --data-raw "{
              \"phone_number\": \"${{ secrets.REPORT_PHONE_NUMBER }}\",
              \"message\": \"${{ env.TEMPLATE_INFO }}STATUS: *FAILURE* üõ¨‚ùå\nTIME: *${{ env.end_date }}*\"
            }"
      # If there is a cancelled, send a report
      - name: Send cancelled report
        if: cancelled()
        run: |
          curl --insecure --location '${{ secrets.REPORT_TARGET_URL }}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer ${{ secrets.REPORT_BEARER_TOKEN }}' \
            --data-raw "{
              \"phone_number\": \"${{ secrets.REPORT_PHONE_NUMBER }}\",
              \"message\": \"${{ env.TEMPLATE_INFO }}STATUS: *CANCEL* üõ¨‚õî\nTIME: *${{ env.end_date }}*\"
            }"

      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------

      - name: Dump GitHub context
        if: success() || failure() || cancelled()
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - name: Dump job context
        if: success() || failure() || cancelled()
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        if: success() || failure() || cancelled()
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        if: success() || failure() || cancelled()
        run: echo '${{ toJSON(runner) }}'
      - name: Dump strategy context
        if: success() || failure() || cancelled()
        run: echo '${{ toJSON(strategy) }}'
      - name: Dump matrix context
        if: success() || failure() || cancelled()
        run: echo '${{ toJSON(matrix) }}'

      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
